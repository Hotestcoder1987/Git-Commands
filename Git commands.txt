# To set name and email for the user who is comminting

	git config --global user.name Pratik
	git config --global user.email pratikb.tepl@gmail.com


# To check set name and email
	git config --global user.name
	git config --global user.email

# To initialize git repository (local folder in system)
	git init

# To view all folders including hiddens
	ls -lart

# To check the status of repository and files
	git status

# To add file (file sent to staging area)
	git add index.html	   ( write filename's starting letter and
                                   hit tab it'll auto complete the file name )
# To add multiple files
	git add -A

# To check status of file
	git status	( Will show changes to be committed )

Note: Always we have to commit atleast once to start tracking our project
      and thats know as initial commit.

# To commit something
	git commit	
	(It will open vim editor, for typing commit message press "i"
	then press "Esc" followed by ":wq" and hit Enter)

# To commit changes or commit after initial commits
	git commit -m "Commit message"		

# To match current file from last commit of your working directory
	git checkout contact.html	( To recover last commit )

# To match all current files from last commit of your working directory
	git checkout -f			( To recover all files )

# To view all the commits and details
	git log

# To view last N commits and its changes
	git log -p -5			(N - no of commits)
	(press "q" to quit)

# To compare working tree to its staging area
	git diff			(Compare file from file in staging area)

# To commit everthing at once and skip staging area
	git commit -a -m "Commit message"

# To remove file only from staging area (To do tracked file into untracked file)
	git rm --cached	filename	(file will still be there in hard disk)

# To remove file from working directory and staging area
	git rm index.html

# To overview or short status of directory
	git status -s

Note: There is master branch and user created branches (By default its in master branch)

# To create users branch
	git branch feature1		(feature1 is branch name)     
	(when its done the manager will approve to merge it in master branch)

# To switch again in master branch
	git checkout master

# To merge user created branch to master
	git merge feature1		(feature1 is branch name)

# To list total branches
	git branch

# To create and Enter into new branch
	git checkout -b Pratiks_feature		(Pratiks_feature is branch name)

# To add connect local git repository to remote git repository
	git remote add origin https://github.com/Hotestcoder1987/Git-Commands.git

# To list remote repository
	git remote

# To see fetching repository and pushing repository
	git remote -v

Note: For Pushing into private repository you need to take 
	read write access by generate SSH key.

# To generate SSH key (only for pushing into private repo)
	ssh-keygen -t rsa -b 4096 -C "your_email@example.com"	(hit in git bash)

# To get agent pid
	eval $(ssh-agent- s)

# To add SSH private key to the SSH agent
	ssh-add ~/.ssh/id_rsa

# To add a new SSH key to your git hub account
	cat ~/.ssh/id_rsa.pub	
	(copy the output text into add new ssh tab in git hub settings)

# To set SSH url (copy ssh url from private repo)
	git remote set-url origin git@github.com:Hotestcoder1987/Git-Commands.git

# To check pushing and fetching urls
	git remote -v

# To push the local repo to remote (master)repo
	git push -u origin master	(-u means in future it'll push there itself)

# To push into user created branch
	git push -u origin Pratiks_feature

Note: Pull request is the request to you hit to repo owner to change/improve the code

# To clone repository
	git clone address	(Clone with HTTPS)
________________________________________________________________________________

				Extra Git Commands

# To open vs code
	code.

# To clear Terminal
	clear

# To create new file
	touch contact.html

# To zoom in or zoom out
	ctrl + or ctrl -

# To list files in the directory
	ls

# To change the typed command (history commands)
	git status	(press up/down arrow key)






